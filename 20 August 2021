(1) Binary Tree Inorder Traversal:

class Solution {
public:
    vector<int>v;
    vector<int> inorderTraversal(TreeNode* root)
    {
        if(root==NULL)
        {
            return v;
        }
        if(root->left)inorderTraversal(root->left);
        v.push_back(root->val);
        if(root->right)inorderTraversal(root->right);
        
        return v;
    }
};

Time Complexity: O(n)think in the terms of number of nodes visited. 
Space Complexity: O(depth of recursion tree)=O(n)(in worst case that is skewed tree)


(2) Same Tree

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) 
    {
       if(!p && !q)
           return true;
        if(!p && q)
            return false;
        if(p && !q)
            return false;
        if(p->val!=q->val)
            return false;
        return (isSameTree(p->left,q->left) && isSameTree(p->right,q->right));
    }
};

Time Complexity: O(n+n)think in the terms of number of nodes visited. 
Space Complexity: O(depth of recursion tree)=O(n+n)(in worst case that is skewed tree)
